package com.example.myapplication.service

import android.app.*
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.myapplication.MainActivity
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.collectLatest

class AlertNotificationService : Service() {
    
    private lateinit var webSocketManager: WebSocketManager
    private lateinit var alertSoundManager: AlertSoundManager
    private val serviceScope = CoroutineScope(Dispatchers.Default + SupervisorJob())
    
    companion object {
        private const val FOREGROUND_CHANNEL_ID = "rescue_service_channel"
        private const val ALERT_CHANNEL_ID = "rescue_alerts_channel"
        private const val FOREGROUND_NOTIFICATION_ID = 1
        
        fun start(context: Context, userId: String, token: String) {
            val intent = Intent(context, AlertNotificationService::class.java).apply {
                putExtra("userId", userId)
                putExtra("token", token)
            }
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(intent)
            } else {
                context.startService(intent)
            }
        }
        
        fun stop(context: Context) {
            val intent = Intent(context, AlertNotificationService::class.java)
            context.stopService(intent)
        }
    }
    
    override fun onCreate() {
        super.onCreate()
        Log.d("AlertNotificationService", "Service created")
        
        alertSoundManager = AlertSoundManager(this)
        webSocketManager = WebSocketManager()
        
        createNotificationChannel()
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d("AlertNotificationService", "Service started")
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Ä–µ–Ω—ã
        if (intent?.action == "STOP_SOUND") {
            Log.d("AlertNotificationService", "Stopping siren")
            alertSoundManager.stopAlertSound()
            return START_STICKY
        }
        
        try {
            val userId = intent?.getStringExtra("userId") ?: return START_NOT_STICKY
            val token = intent.getStringExtra("token") ?: return START_NOT_STICKY
            
            Log.d("AlertNotificationService", "Starting service for user: $userId")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º foreground notification
            val notification = createForegroundNotification()
            startForeground(FOREGROUND_NOTIFICATION_ID, notification)
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            try {
                Log.d("AlertNotificationService", "Connecting to WebSocket...")
                webSocketManager.connect(userId, token)
                Log.d("AlertNotificationService", "WebSocket connection initiated")
            } catch (e: Exception) {
                Log.e("AlertNotificationService", "WebSocket connection failed", e)
            }
            
            // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
            serviceScope.launch {
                try {
                    webSocketManager.newAlert.collectLatest { alert ->
                        alert?.let {
                            Log.d("AlertNotificationService", "New alert received: ${it.id}")
                            
                            // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–∏—Ä–µ–Ω—É
                            try {
                                alertSoundManager.playAlertSound()
                            } catch (e: Exception) {
                                Log.e("AlertNotificationService", "Failed to play alert sound", e)
                            }
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            try {
                                showAlertNotification(it.title ?: "–ù–æ–≤—ã–π –≤—ã–∑–æ–≤", it.description ?: "")
                            } catch (e: Exception) {
                                Log.e("AlertNotificationService", "Failed to show notification", e)
                            }
                            
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Ä–µ–Ω—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                            serviceScope.launch {
                                delay(30000)
                                alertSoundManager.stopAlertSound()
                            }
                        }
                    }
                } catch (e: Exception) {
                    Log.e("AlertNotificationService", "Error in alert collection", e)
                }
            }
            
            return START_STICKY
        } catch (e: Exception) {
            Log.e("AlertNotificationService", "Service start failed", e)
            return START_NOT_STICKY
        }
    }
    
    override fun onBind(intent: Intent?): IBinder? = null
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d("AlertNotificationService", "Service destroyed")
        
        alertSoundManager.release()
        webSocketManager.disconnect()
        serviceScope.cancel()
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è Android 8.0+)
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            
            // –ö–∞–Ω–∞–ª –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            val foregroundChannel = NotificationChannel(
                FOREGROUND_CHANNEL_ID,
                "–°–ª—É–∂–±–∞ —Å–ø–∞—Å–µ–Ω–∏—è",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "–§–æ–Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å–ª—É–∂–±—ã —Å–ø–∞—Å–µ–Ω–∏—è"
                enableVibration(false)
                enableLights(false)
                setShowBadge(false)
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            val alertChannel = NotificationChannel(
                ALERT_CHANNEL_ID,
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö"
                enableVibration(true)
                enableLights(true)
                setShowBadge(true)
                lockscreenVisibility = Notification.VISIBILITY_PUBLIC
            }
            
            notificationManager.createNotificationChannel(foregroundChannel)
            notificationManager.createNotificationChannel(alertChannel)
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è foreground service
     */
    private fun createForegroundNotification(): Notification {
        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_IMMUTABLE
        )
        
        return NotificationCompat.Builder(this, FOREGROUND_CHANNEL_ID)
            .setContentTitle("–°–ª—É–∂–±–∞ —Å–ø–∞—Å–µ–Ω–∏—è")
            .setContentText("–û–∂–∏–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤...")
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentIntent(pendingIntent)
            .setOngoing(true)
            .setSilent(true)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .build()
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤—ã–∑–æ–≤–µ
     */
    private fun showAlertNotification(title: String, description: String) {
        val intent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
        }
        
        val pendingIntent = PendingIntent.getActivity(
            this,
            System.currentTimeMillis().toInt(),
            intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Ä–µ–Ω—ã
        val stopSoundIntent = Intent(this, AlertNotificationService::class.java).apply {
            action = "STOP_SOUND"
        }
        val stopSoundPendingIntent = PendingIntent.getService(
            this,
            0,
            stopSoundIntent,
            PendingIntent.FLAG_IMMUTABLE
        )
        
        val notification = NotificationCompat.Builder(this, ALERT_CHANNEL_ID)
            .setContentTitle("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –í–´–ó–û–í!")
            .setContentText(title)
            .setStyle(NotificationCompat.BigTextStyle().bigText(description))
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentIntent(pendingIntent)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setAutoCancel(true)
            .setOngoing(false)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setVibrate(longArrayOf(0, 500, 200, 500, 200, 500))
            .addAction(
                android.R.drawable.ic_lock_silent_mode_off,
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Ä–µ–Ω—É",
                stopSoundPendingIntent
            )
            .build()
        
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(System.currentTimeMillis().toInt(), notification)
    }
}
