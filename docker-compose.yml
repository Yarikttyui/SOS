services:
  # MySQL Database
  mysql:
    image: mysql:8.4
    container_name: rescue_mysql
    environment:
      MYSQL_ROOT_PASSWORD: rescue_root_pass_2024_secure
      MYSQL_DATABASE: rescue_db
      MYSQL_USER: rescue_user
      MYSQL_PASSWORD: rescue_pass_2024_secure
    command:
      [
        "mysqld",
        "--default-authentication-plugin=mysql_native_password",
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
        "--max_connections=300",
        "--innodb_buffer_pool_size=256M"
      ]
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prescue_root_pass_2024_secure"]
      interval: 10s
      timeout: 5s
      retries: 7
    networks:
      - rescue_network
    restart: unless-stopped

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: rescue_redis
    command: redis-server --appendonly yes --requirepass rescue_redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - rescue_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rescue_backend
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: mysql+pymysql://rescue_user:rescue_pass_2024_secure@mysql:3306/rescue_db?charset=utf8mb4
      REDIS_URL: redis://:rescue_redis_pass@redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rescue_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker (фоновые задачи)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rescue_celery_worker
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: mysql+pymysql://rescue_user:rescue_pass_2024_secure@mysql:3306/rescue_db?charset=utf8mb4
      REDIS_URL: redis://:rescue_redis_pass@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - mysql
      - redis
    networks:
      - rescue_network
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rescue_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
      VITE_MAPBOX_TOKEN: pk.eyJ1IjoicmVzY3VlLXN5c3RlbSIsImEiOiJjbHh4eHh4eHgifQ.xxxx
    depends_on:
      - backend
    networks:
      - rescue_network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Nginx Reverse Proxy (production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: rescue_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./docker/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - rescue_network
  #   restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  rescue_network:
    driver: bridge
