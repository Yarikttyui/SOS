"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Rescue System."""
from __future__ import annotations

import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List

sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy.orm import Session  # noqa: E402
from sqlalchemy import func  # noqa: E402

from app.core.config import settings  # noqa: E402
from app.core.database import Base, SessionLocal, sync_engine  # noqa: E402
from app.core.security import get_password_hash  # noqa: E402
from app.models.team import RescueTeam  # noqa: E402
from app.models.user import User  # noqa: E402


SPECIALIZED_UNITS = [
    {
        "type": "fire",
        "name": "–ü–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞",
        "summary": "–ü–ª–∞–º—è, –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ, –∑–∞–ø–∞—Ö –≥–∞—Ä–∏",
        "description": "–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–∂–∞—Ä—ã, –≤–∑—Ä—ã–≤—ã –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Ç–µ–ø–ª–æ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.",
        "accent": "#F97316",
        "icon": "flame",
        "capacity": "4‚Äì8 —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π",
        "specialization": ["firefighter"],
    },
    {
        "type": "medical",
        "name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å",
        "summary": "–¢—Ä–∞–≤–º—ã, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è, —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è",
        "description": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å, —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö.",
        "accent": "#EF5DA8",
        "icon": "medical",
        "capacity": "3‚Äì6 –º–µ–¥–∏–∫–æ–≤",
        "specialization": ["paramedic"],
    },
    {
        "type": "police",
        "name": "–ü–æ–ª–∏—Ü–∏—è",
        "summary": "–£–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è",
        "description": "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–ø–æ—Ä—è–¥–∫–∞, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —ç–≤–∞–∫—É–∞—Ü–∏–π.",
        "accent": "#60A5FA",
        "icon": "shield",
        "capacity": "4‚Äì10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "specialization": ["police"],
    },
    {
        "type": "water_rescue",
        "name": "–°–ø–∞—Å–µ–Ω–∏–µ –Ω–∞ –≤–æ–¥–µ",
        "summary": "–¢–µ—á–µ–Ω–∏–µ, —É—Ç–æ–ø–ª–µ–Ω–∏–µ, –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ",
        "description": "–ü–æ–∏—Å–∫ –ª—é–¥–µ–π –Ω–∞ –≤–æ–¥–µ, —ç–≤–∞–∫—É–∞—Ü–∏—è –∏–∑ –ø–æ–¥—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω, —Ä–∞–±–æ—Ç–∞ —Å –≥–∏–¥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–æ–π.",
        "accent": "#22D3EE",
        "icon": "waves",
        "capacity": "3‚Äì8 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "specialization": ["water_rescue"],
    },
    {
        "type": "mountain_rescue",
        "name": "–ì–æ—Ä–Ω–æ—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è",
        "summary": "–õ–∞–≤–∏–Ω–∞, –æ–±—Ä—ã–≤, –ø–æ—Ç–µ—Ä—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞",
        "description": "–†–∞–±–æ—Ç–∞ –≤ –≥–æ—Ä–∞—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, —ç–≤–∞–∫—É–∞—Ü–∏—è —Å –≤—ã—Å–æ—Ç—ã.",
        "accent": "#8B5CF6",
        "icon": "mountain",
        "capacity": "4‚Äì12 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "specialization": ["mountain_rescue"],
    },
    {
        "type": "search_rescue",
        "name": "–ü–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è",
        "summary": "–ü—Ä–æ–ø–∞–≤—à–∏–µ –ª—é–¥–∏, —Ä–∞–∑–≤–µ–¥–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
        "description": "–ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö, —Ä–∞–±–æ—Ç–∞ —Å –∫–∏–Ω–æ–ª–æ–≥–∞–º–∏, –¥—Ä–æ–Ω–∞–º–∏ –∏ —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–∞–º–∏.",
        "accent": "#34D399",
        "icon": "search",
        "capacity": "6‚Äì15 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "specialization": ["search_rescue"],
    },
    {
        "type": "ecological",
        "name": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è",
        "summary": "–•–∏–º–∏—á–µ—Å–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å, —É—Ç–µ—á–∫–∞ –≥–∞–∑–∞",
        "description": "–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É–≥—Ä–æ–∑, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.",
        "accent": "#FACC15",
        "icon": "biohazard",
        "capacity": "4‚Äì8 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "specialization": ["ecological"],
    },
    {
        "type": "multi_purpose",
        "name": "–û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
        "summary": "–ò–Ω–æ–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç, —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–º–æ—â–∏",
        "description": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–ª—ã –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.",
        "accent": "#F472B6",
        "icon": "support",
        "capacity": "8‚Äì16 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "specialization": ["multi_purpose"],
        "badge": "–≤—ã–±—Ä–∞–Ω–æ",
    },
]


CORE_ACCOUNTS = (
    {
        "email": "admin@rescue-system.ru",
        "legacy_emails": ["admin@admin"],
        "password": "admin1",
        "role": "admin",
        "full_name": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "phone": "+79990000001",
        "is_shared_account": False,
    },
    {
        "email": "operator@rescue-system.ru",
        "legacy_emails": ["operator@operator"],
        "password": "operator1",
        "role": "operator",
        "full_name": "–î–µ–∂—É—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä",
        "phone": "+79990000002",
        "is_shared_account": False,
    },
    {
        "email": "team@rescue-system.ru",
        "legacy_emails": ["spasat@spasat"],
        "password": "spasat1",
        "role": "rescuer",
        "full_name": "–û–±—â–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π",
        "phone": "+79990000003",
        "is_shared_account": True,
        "specialization": "multi_purpose",
    },
)


def drop_tables() -> None:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
    Base.metadata.drop_all(bind=sync_engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")


def create_tables() -> None:
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–∏–º –º–æ–¥–µ–ª—è–º."""
    print("üóÑÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    Base.metadata.create_all(bind=sync_engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


def _normalize_email(value: str | None) -> str | None:
    if not value:
        return None
    return value.strip().lower()


def _normalize_phone(value: str | None) -> str | None:
    if not value:
        return None
    cleaned = value.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    return cleaned or None


def create_core_users(db: Session) -> Dict[str, User]:
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

    created: Dict[str, User] = {}

    for raw_account in CORE_ACCOUNTS:
        account = raw_account.copy()
        legacy_emails: List[str] = [email for email in account.pop("legacy_emails", []) if email]
        password = account.pop("password")

        normalized_email = _normalize_email(account.get("email"))
        account["email"] = normalized_email
        account["phone"] = _normalize_phone(account.get("phone"))

        existing = (
            db.query(User)
            .filter(func.lower(User.email) == normalized_email)
            .first()
        )

        if not existing and legacy_emails:
            for legacy in legacy_emails:
                legacy_norm = _normalize_email(legacy)
                if not legacy_norm:
                    continue
                legacy_user = (
                    db.query(User)
                    .filter(func.lower(User.email) == legacy_norm)
                    .first()
                )
                if legacy_user:
                    print(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ–º legacy email {legacy_user.email} ‚Üí {normalized_email}")
                    legacy_user.email = normalized_email
                    if account.get("full_name"):
                        legacy_user.full_name = account["full_name"]
                    if account.get("phone"):
                        legacy_user.phone = account["phone"]
                    legacy_user.role = account.get("role", legacy_user.role)
                    legacy_user.is_shared_account = account.get("is_shared_account", legacy_user.is_shared_account)
                    legacy_user.specialization = account.get("specialization", legacy_user.specialization)
                    existing = legacy_user
                    break

        if existing:
            print(f"  ‚Ä¢ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing.email}")
            created[existing.email] = existing
            continue

        user = User(
            **account,
            hashed_password=get_password_hash(password),
            is_active=True,
            is_verified=True,
            created_at=datetime.utcnow(),
        )
        db.add(user)
        db.flush()
        created[user.email] = user
        print(f"  ‚úì –°–æ–∑–¥–∞–Ω–æ: {user.email} ({user.role})")

    db.commit()
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã: {len(created)}")
    return created


def create_specialized_teams(db: Session, users: Dict[str, User]) -> None:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è."""
    print("\nüöí –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π...")

    shared_rescuer = users.get("team@rescue-system.ru") or users.get("spasat@spasat")
    default_lat = getattr(settings, "DEFAULT_LATITUDE", None)
    default_lon = getattr(settings, "DEFAULT_LONGITUDE", None)

    for unit in SPECIALIZED_UNITS:
        exists = (
            db.query(RescueTeam)
            .filter(RescueTeam.type == unit["type"], RescueTeam.name == unit["name"])
            .first()
        )
        if exists:
            print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞: {exists.name}")
            continue

        meta = {
            "summary": unit["summary"],
            "description": unit["description"],
            "accent": unit["accent"],
            "icon": unit["icon"],
        }
        if "badge" in unit:
            meta["badge"] = unit["badge"].upper()

        team = RescueTeam(
            name=unit["name"],
            type=unit["type"],
            status="available",
            contact_email="support@rescue-system.ru",
            contact_phone="8-800-500-600",
            base_latitude=default_lat,
            base_longitude=default_lon,
            base_address=unit.get("base_address", "–¢–≤–µ—Ä—å, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä"),
            capacity=unit["capacity"],
            specialization=unit["specialization"],
            members=[],
            equipment=[],
            meta=meta,
            leader_id=None,
            leader_name=None,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
        )

        db.add(team)
        print(f"  ‚úì –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {team.name}")

    if shared_rescuer:
        shared_rescuer.team_id = None
        shared_rescuer.is_team_leader = False

    db.commit()
    print("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã")


def main() -> None:
    print("=" * 64)
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø RESCUE SYSTEM (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)")
    print("=" * 64)

    drop_tables()
    create_tables()

    db = SessionLocal()
    try:
        users = create_core_users(db)
        create_specialized_teams(db, users)
    finally:
        db.close()

    print("\n‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("–ù–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
    print("  ‚Ä¢ admin@rescue-system.ru     / admin1")
    print("  ‚Ä¢ operator@rescue-system.ru / operator1")
    print("  ‚Ä¢ team@rescue-system.ru     / spasat1")
    print("–ì—Ä–∞–∂–¥–∞–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
    print("=" * 64)


if __name__ == "__main__":
    main()
