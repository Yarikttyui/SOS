"""–¢–µ—Å—Ç API –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞"""
import sys
sys.path.insert(0, '.')

from app.core.database import sync_engine
from sqlalchemy import text

# –ü–æ–ª—É—á–∏–º ID –≤—ã–∑–æ–≤–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'assigned'
conn = sync_engine.connect()
result = conn.execute(text("SELECT id, status, assigned_to FROM sos_alerts WHERE status='assigned' LIMIT 1"))
alert = result.fetchone()

if not alert:
    print("‚ùå –ù–µ—Ç –≤—ã–∑–æ–≤–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'assigned'")
    # –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π
    conn.execute(text("""
        INSERT INTO sos_alerts (id, user_id, type, status, priority, latitude, longitude, title, description, created_at)
        VALUES (UUID(), (SELECT id FROM users WHERE email='citizen@test.ru'), 'general', 'assigned', 2, 55.7558, 37.6173, '–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤', '–î–ª—è —Ç–µ—Å—Ç–∞ API', NOW())
    """))
    conn.commit()
    result = conn.execute(text("SELECT id, status, assigned_to FROM sos_alerts WHERE status='assigned' LIMIT 1"))
    alert = result.fetchone()

alert_id, status, assigned_to = alert
print(f"\nüìã –í—ã–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: {alert_id}")
print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")
print(f"–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞: {assigned_to or '–ù–∏–∫–æ–º—É'}")

# –ü–æ–ª—É—á–∏–º ID team leader'–∞
result = conn.execute(text("SELECT id, email, team_id FROM users WHERE role='rescuer' AND is_team_leader=1 LIMIT 1"))
leader = result.fetchone()
leader_id, leader_email, team_id = leader
print(f"\nüë®‚Äçüöí Team Leader: {leader_email} (ID: {leader_id}, Team: {team_id})")

conn.close()

# –¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
import requests

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
login_resp = requests.post('http://localhost:8000/api/v1/auth/login', json={
    'email': leader_email,
    'password': 'Test1234'
})

if login_resp.status_code != 200:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_resp.text}")
    sys.exit(1)

token = login_resp.json()['access_token']
headers = {'Authorization': f'Bearer {token}'}

print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞
print(f"\nüîµ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–∑–æ–≤ {alert_id}...")
accept_resp = requests.patch(f'http://localhost:8000/api/v1/sos/{alert_id}', json={}, headers=headers)

print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {accept_resp.status_code}")
if accept_resp.status_code == 200:
    updated_alert = accept_resp.json()
    print(f"‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç!")
    print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {updated_alert['status']}")
    print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞: {updated_alert.get('assigned_to', '–ù–ï –£–ö–ê–ó–ê–ù–û!')}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {updated_alert.get('team_id', '–ù–ï –£–ö–ê–ó–ê–ù–û!')}")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞: {accept_resp.text}")

# –ü—Ä–æ–≤–µ—Ä–∏–º –≤ –±–∞–∑–µ
conn = sync_engine.connect()
result = conn.execute(text(f"SELECT status, assigned_to, team_id FROM sos_alerts WHERE id='{alert_id}'"))
alert_after = result.fetchone()
status_after, assigned_after, team_after = alert_after

print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î:")
print(f"   –°—Ç–∞—Ç—É—Å: {status_after}")
print(f"   Assigned to: {assigned_after or 'NULL ‚ùå'}")
print(f"   Team: {team_after or 'NULL ‚ùå'}")

if assigned_after == leader_id:
    print("\n‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
else:
    print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: assigned_to –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {leader_id}, –∞ —ç—Ç–æ {assigned_after}")

conn.close()
