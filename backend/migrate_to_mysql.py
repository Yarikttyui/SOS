"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π SQLite –±–∞–∑—ã –≤ MySQL
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import pymysql

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SQLITE_DB = "sqlite:///./rescue.db"
MYSQL_DB = "mysql+pymysql://rescue_user:55646504@localhost:3306/rescue_db?charset=utf8mb4"


def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ MySQL"""
    
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
    sqlite_engine = create_engine(SQLITE_DB)
    SQLiteSession = sessionmaker(bind=sqlite_engine)
    sqlite_session = SQLiteSession()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    mysql_engine = create_engine(MYSQL_DB, echo=True)
    MySQLSession = sessionmaker(bind=mysql_engine)
    mysql_session = MySQLSession()
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ SQLite
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...")
        tables_query = text("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
        tables = sqlite_session.execute(tables_query).fetchall()
        table_names = [table[0] for table in tables]
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
        for table_name in table_names:
            print(f"  - {table_name}")
        
        # –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for table_name in table_names:
            print(f"\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            select_query = text(f"SELECT * FROM {table_name}")
            rows = sqlite_session.execute(select_query).fetchall()
            
            if not rows:
                print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            print(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
            
            # –ü–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            columns = rows[0]._mapping.keys()
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É MySQL
            mysql_session.execute(text(f"DELETE FROM {table_name}"))
            
            # –í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ MySQL
            for row in rows:
                columns_str = ", ".join(columns)
                placeholders = ", ".join([f":{col}" for col in columns])
                insert_query = text(f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})")
                
                row_dict = dict(row._mapping)
                mysql_session.execute(insert_query, row_dict)
            
            mysql_session.commit()
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(rows)} –∑–∞–ø–∏—Å–µ–π)")
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        mysql_session.rollback()
        raise
    
    finally:
        sqlite_session.close()
        mysql_session.close()


if __name__ == "__main__":
    print("=" * 60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• SQLite ‚Üí MySQL")
    print("=" * 60)
    print()
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {SQLITE_DB}")
    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {MYSQL_DB}")
    print()
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ MySQL –±–∞–∑–µ!")
    print()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() != 'y':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")
        sys.exit(0)
    
    try:
        migrate_data()
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        sys.exit(1)
