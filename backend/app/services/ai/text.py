"""
Text Analysis Service
"""
from typing import Dict, Any
from openai import OpenAI

from app.core.config import settings


class TextAnalyzer:
    """Text analysis for emergency classification"""
    
    def __init__(self):
        self.client = OpenAI(
            api_key=settings.OPENAI_API_KEY,
            base_url=settings.OPENAI_BASE_URL
        )
    
    async def classify_emergency(self, text: str) -> Dict[str, Any]:
        """
        Classify emergency type from text description
        
        Args:
            text: Emergency description
            
        Returns:
            dict: Classification results with enhanced details
        """
        try:
            system_prompt = """–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ç–∏–ø —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è.

–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã:
- fire (–ø–æ–∂–∞—Ä)
- medical (–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å)
- police (–ø–æ–ª–∏—Ü–∏—è)
- water_rescue (—Å–ø–∞—Å–µ–Ω–∏–µ –Ω–∞ –≤–æ–¥–µ)
- mountain_rescue (–≥–æ—Ä–Ω–æ—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
- search_rescue (–ø–æ–∏—Å–∫–æ–≤–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
- ecological (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞)
- general (–æ–±—â–∞—è –ß–°)

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (1-5):
1 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π (—É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏)
2 - –≤—ã—Å–æ–∫–∏–π (—Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å)
3 - —Å—Ä–µ–¥–Ω–∏–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å)
4 - –Ω–∏–∑–∫–∏–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
5 - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "type": "—Ç–∏–ø_–ß–°",
  "priority": 1-5,
  "severity": "low/medium/high/critical",
  "keywords": ["–∫–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞"],
  "confidence": 0.0-1.0,
  "estimated_victims": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "location_hints": ["–ø–æ–¥—Å–∫–∞–∑–∫–∏_–ø–æ_–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é"],
  "required_resources": ["–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ_—Ä–µ—Å—É—Ä—Å—ã"],
  "immediate_actions": ["–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ_–¥–µ–π—Å—Ç–≤–∏—è"],
  "risk_assessment": "–æ—Ü–µ–Ω–∫–∞_—Ä–∏—Å–∫–æ–≤"
}"""
            
            print(f"ü§ñ AI Request - Text: {text[:100]}...")
            
            response = self.client.chat.completions.create(
                model="deepseek-chat",  # DeepSeek model
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–û–ø–∏—Å–∞–Ω–∏–µ –ß–°: {text}"}
                ],
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            import json
            raw_content = response.choices[0].message.content
            print(f"üéØ AI Raw Response: {raw_content}")
            
            result = json.loads(raw_content)
            print(f"üìä AI Parsed Result: {result}")
            
            result["analyzed_at"] = "now"
            result["model_used"] = "gpt-4o"
            
            print(f"‚úÖ AI Final Result - Confidence: {result.get('confidence', 'N/A')}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå AI Classification Error: {str(e)}")
            return {
                "type": "general",
                "priority": 3,
                "severity": "medium",
                "keywords": [],
                "confidence": 0.0,
                "estimated_victims": None,
                "location_hints": [],
                "required_resources": ["–ë–∞–∑–æ–≤–∞—è —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"],
                "immediate_actions": ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π"],
                "risk_assessment": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ",
                "error": str(e)
            }
    
    async def generate_rescue_plan(
        self,
        emergency_type: str,
        description: str,
        location: str = "",
        resources_available: list = None
    ) -> Dict[str, Any]:
        """
        Generate detailed rescue operation plan using AI
        
        Args:
            emergency_type: Type of emergency
            description: Situation description
            location: Location details
            resources_available: Available rescue resources
            
        Returns:
            dict: Detailed rescue plan
        """
        try:
            resources_str = ", ".join(resources_available) if resources_available else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
            
            prompt = f"""–°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–´–ô –ø–ª–∞–Ω —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:

–¢–∏–ø –ß–°: {emergency_type}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: {resources_str}

–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "operation_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
  "phases": [
    {{
      "phase_number": 1,
      "phase_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞",
      "duration_estimate": "–æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
      "actions": ["–¥–µ–π—Å—Ç–≤–∏–µ 1", "–¥–µ–π—Å—Ç–≤–∏–µ 2"],
      "required_personnel": ["—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 1"],
      "equipment_needed": ["–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 1"]
    }}
  ],
  "team_composition": {{
    "team_leader": "—Ä–æ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
    "members": ["—á–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã 1", "—á–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã 2"],
    "specialists": ["—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç 1"]
  }},
  "safety_measures": ["–º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 1", "–º–µ—Ä–∞ 2"],
  "communication_plan": "–ø–ª–∞–Ω —Å–≤—è–∑–∏",
  "evacuation_routes": ["–º–∞—Ä—à—Ä—É—Ç 1"],
  "medical_support": "–ø–ª–∞–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
  "contingency_plans": ["–ø–ª–∞–Ω –ë", "–ø–ª–∞–Ω –í"],
  "estimated_duration": "–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
  "success_criteria": ["–∫—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞ 1"],
  "risks": ["—Ä–∏—Å–∫ 1", "—Ä–∏—Å–∫ 2"]
}}"""
            
            response = self.client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                response_format={"type": "json_object"}
            )
            
            import json
            plan = json.loads(response.choices[0].message.content)
            plan["generated_at"] = "now"
            plan["model_used"] = "gpt-4o"
            
            return plan
            
        except Exception as e:
            print(f"‚ùå Plan Generation Error: {str(e)}")
            return {
                "operation_name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                "phases": [
                    {
                        "phase_number": 1,
                        "phase_name": "–û—Ü–µ–Ω–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏",
                        "duration_estimate": "15 –º–∏–Ω—É—Ç",
                        "actions": ["–ü—Ä–∏–±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–æ", "–û—Ü–µ–Ω–∏—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É"],
                        "required_personnel": ["–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã"],
                        "equipment_needed": ["–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏"]
                    }
                ],
                "team_composition": {
                    "team_leader": "–°—Ç–∞—Ä—à–∏–π —Å–ø–∞—Å–∞—Ç–µ–ª—å",
                    "members": ["–°–ø–∞—Å–∞—Ç–µ–ª—å 1", "–°–ø–∞—Å–∞—Ç–µ–ª—å 2"],
                    "specialists": []
                },
                "safety_measures": ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–ò–ó"],
                "communication_plan": "–†–∞–¥–∏–æ—Å–≤—è–∑—å",
                "evacuation_routes": ["–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç"],
                "medical_support": "–ë–∞–∑–æ–≤–∞—è –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å",
                "contingency_plans": ["–í—ã–∑–≤–∞—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ"],
                "estimated_duration": "1-2 —á–∞—Å–∞",
                "success_criteria": ["–í—Å–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
                "risks": ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤"],
                "error": str(e)
            }
    
    async def analyze_situation_report(self, report_text: str) -> Dict[str, Any]:
        """
        Analyze situation report and extract key information
        
        Args:
            report_text: Situation report text
            
        Returns:
            dict: Analyzed report data
        """
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç—á–µ—Ç –æ –ß–° –∏ –∏–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

{report_text}

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ",
  "key_points": ["–∫–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2"],
  "current_status": "—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å",
  "challenges": ["–ø—Ä–æ–±–ª–µ–º–∞ 1"],
  "progress": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
  "next_steps": ["—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ 1"],
  "sentiment": "positive/neutral/negative/critical",
  "urgency_level": 1-5
}}"""
            
            response = self.client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            import json
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            return {
                "summary": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                "key_points": [],
                "current_status": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "challenges": [],
                "progress": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "next_steps": [],
                "sentiment": "neutral",
                "urgency_level": 3,
                "error": str(e)
            }

